{"ts":1372852082993,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!DOCTYPE html>\n<html>\n<head>\n<script type=\"text/javascript\">\n    var es = new EventSource('/audience');\n    es.onmessage = function(event) {\n        var h2 = document.querySelector('#date-time');\n        h2.innerHTML = event.data;\n    }\n</script>\n</head>\n<body>\n<center>\n<h1>Presenter Server-Sent Events Time of Day</h1>\n<h2 id=\"date-time\" name=\"date-time\">\n</h2>\n</center>\n</body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":391}]],"length":391}
{"contributors":[],"silentsave":true,"ts":1372853154037,"patch":[[{"diffs":[[0," functio"],[1,"git"],[0,"n(event)"]],"start1":123,"start2":123,"length1":16,"length2":19}]],"length":394,"saved":false}
{"ts":1372853160574,"patch":[[{"diffs":[[0,"ctio"],[-1,"git"],[0,"n(ev"]],"start1":127,"start2":127,"length1":11,"length2":8}]],"length":391,"saved":false}
{"ts":1372857045099,"patch":[[{"diffs":[[0,"E html>\n"],[1,"\n"],[0,"<html>\n<"]],"start1":8,"start2":8,"length1":16,"length2":17}]],"length":392,"saved":false}
{"ts":1372857046425,"patch":[[{"diffs":[[0,"E html>\n"],[1,"/*\n \nIf you want more control over impress.js, the first thing is to change the way you call it. The demo\ninitializes impress.js like this:\n \n<script src=\"js/impress.js\"></script>\n<script>impress().init();</script>\n \nYou want to change this to the following:\n \n<script src=\"js/impress.js\"></script>\n<script>\nvar api = impress();\napi.init();\n</script>\n \nThe key difference here is that you now have a JavaScript variable called api that you can call\nimpress's methods on. The full documentation is in impress's index.html, but in short, you now have\napi.next(), api.prev(), and api.goto() for moving around the slideshow.\n \nFor timing the transitions between slides, you can use two functions that are part of JavaScript\nitself; no need for jQuery or anything. These functions are setInterval() and setTimeout(). They both\ntake two arguments: a thing to call, and a delay (in milliseconds) to wait before calling it.\nsetInterval() will call your thing over and over again; setTimeout() will call it once.\n \n \nFor instance, if you make the changes above, the simplest thing you can add is an auto-advancing\ninterval, like so:\n \nsetInterval(api.next, 5000);\n \nThat will move to the next slide every 3 seconds."],[0,"\n<html>\n"]],"start1":8,"start2":8,"length1":16,"length2":1222}]],"length":1598,"saved":false}
{"ts":1372857053387,"patch":[[{"diffs":[[0,"econds.\n"],[1,"\n"],[0,"<html>\n<"]],"start1":1215,"start2":1215,"length1":16,"length2":17}]],"length":1599,"saved":false}
{"ts":1372857056886,"patch":[[{"diffs":[[0,"econds.\n"],[1,"*"],[0,"\n<html>\n"]],"start1":1215,"start2":1215,"length1":16,"length2":17}]],"length":1600,"saved":false}
{"ts":1372857058315,"patch":[[{"diffs":[[0,"conds.\n*"],[1,"/\n"],[0,"\n<html>\n"]],"start1":1216,"start2":1216,"length1":16,"length2":18}]],"length":1602,"saved":false}
{"ts":1372857102680,"patch":[[{"diffs":[[0,"l>\n/*\n \n"],[1,"#"],[0,"If you w"]],"start1":13,"start2":13,"length1":16,"length2":17}]],"length":1603,"saved":false}
{"ts":1372857108097,"patch":[[{"diffs":[[0,"ike this:\n \n"],[1,"#"],[0,"<script src="]],"start1":147,"start2":147,"length1":24,"length2":25}]],"length":1604,"saved":false}
{"ts":1372857111431,"patch":[[{"diffs":[[0,"this:\n \n"],[-1,"#"],[0,"<script "]],"start1":151,"start2":151,"length1":17,"length2":16}]],"length":1603,"saved":false}
{"ts":1372857114634,"patch":[[{"diffs":[[0,"l>\n/*\n \n"],[-1,"#"],[0,"If you w"]],"start1":13,"start2":13,"length1":17,"length2":16}]],"length":1602,"saved":false}
{"ts":1372857119036,"patch":[[{"diffs":[[0,"l>\n/*\n \n"],[1,"#"],[0,"If you w"]],"start1":13,"start2":13,"length1":16,"length2":17}]],"length":1603,"saved":false}
{"ts":1372857121827,"patch":[[{"diffs":[[0,"l>\n/*\n \n"],[-1,"#"],[0,"If you w"]],"start1":13,"start2":13,"length1":17,"length2":16},{"diffs":[[0,"nds.\n*/\n"],[-1,"\n"],[0,"<html>\n<"]],"start1":1218,"start2":1218,"length1":17,"length2":16}]],"length":1601,"saved":false}
{"ts":1372857124005,"patch":[[{"diffs":[[0,"ds.\n"],[-1,"*/\n"],[0,"<htm"]],"start1":1219,"start2":1219,"length1":11,"length2":8}]],"length":1598,"saved":false}
{"ts":1372857125349,"patch":[[{"diffs":[[0,"ml>\n"],[-1,"/*\n \nIf you want more control over impress.js, the first thing is to change the way you call it. The demo\ninitializes impress.js like this:\n \n<script src=\"js/impress.js\"></script>\n<script>impress().init();</script>\n \nYou want to change this to the following:\n \n<script src=\"js/impress.js\"></script>\n<script>\nvar api = impress();\napi.init();\n</script>\n \nThe key difference here is that you now have a JavaScript variable called api that you can call\nimpress's methods on. The full documentation is in impress's index.html, but in short, you now have\napi.next(), api.prev(), and api.goto() for moving around the slideshow.\n \nFor timing the transitions between slides, you can use two functions that are part of JavaScript\nitself; no need for jQuery or anything. These functions are setInterval() and setTimeout(). They both\ntake two arguments: a thing to call, and a delay (in milliseconds) to wait before calling it.\nsetInterval() will call your thing over and over again; setTimeout() will call it once.\n \n \nFor instance, if you make the changes above, the simplest thing you can add is an auto-advancing\ninterval, like so:\n \nsetInterval(api.next, 5000);\n \nThat will move to the next slide every 3 seconds."],[0,"\n<ht"]],"start1":12,"start2":12,"length1":1214,"length2":8}]],"length":392,"saved":false}
